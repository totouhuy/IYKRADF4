{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer of SQL and Phyton Exericse (Week 2)\n",
    "This Notebook will answer all assignment questions that was a part of IYKRA Data Science Fellowship Submission.\n",
    "<br> Part 1 : SQL Question </br>\n",
    "<br> Part 2 : Phyton </br>\n",
    "<br> Datasets from http://www.postgresqltutorial.com/postgresql-sample-database/ </br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to connect postgreSQL into Jupyter, there are several steps that we need to follow:\n",
    "1. Download and install **iphyton-sql, psycopg2-binary ,** and **sqlalchemy** (By using !pip install) \n",
    "<br> </br>\n",
    "<br> **iphyton-sql** --> use for SQL Magic (%% SQL) </br>\n",
    "<br> **sqlalchemy** --> help SQL function save in pandas phyton </br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ipython-sql in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (0.4.0)\n",
      "Requirement already satisfied: sqlalchemy>=0.6.7 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython-sql) (1.3.9)\n",
      "Requirement already satisfied: ipython>=1.0 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython-sql) (7.8.0)\n",
      "Requirement already satisfied: sqlparse in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython-sql) (0.3.1)\n",
      "Requirement already satisfied: prettytable<1 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython-sql) (0.7.2)\n",
      "Requirement already satisfied: six in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython-sql) (1.12.0)\n",
      "Requirement already satisfied: ipython-genutils>=0.1.0 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython-sql) (0.2.0)\n",
      "Requirement already satisfied: traitlets>=4.2 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (4.3.3)\n",
      "Requirement already satisfied: pickleshare in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (0.7.5)\n",
      "Requirement already satisfied: decorator in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (4.4.0)\n",
      "Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (2.0.10)\n",
      "Requirement already satisfied: pexpect; sys_platform != \"win32\" in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (4.7.0)\n",
      "Requirement already satisfied: pygments in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (2.4.2)\n",
      "Requirement already satisfied: backcall in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (0.1.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (0.15.1)\n",
      "Requirement already satisfied: setuptools>=18.5 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (41.4.0)\n",
      "Requirement already satisfied: appnope; sys_platform == \"darwin\" in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from ipython>=1.0->ipython-sql) (0.1.0)\n",
      "Requirement already satisfied: wcwidth in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython>=1.0->ipython-sql) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from pexpect; sys_platform != \"win32\"->ipython>=1.0->ipython-sql) (0.6.0)\n",
      "Requirement already satisfied: parso>=0.5.0 in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (from jedi>=0.10->ipython>=1.0->ipython-sql) (0.5.1)\n",
      "Requirement already satisfied: psycopg2-binary in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (2.8.5)\n",
      "Requirement already satisfied: sqlalchemy in /Users/raveltowangistu/opt/anaconda3/lib/python3.7/site-packages (1.3.9)\n"
     ]
    }
   ],
   "source": [
    "!pip install ipython-sql\n",
    "!pip install psycopg2-binary\n",
    "!pip install sqlalchemy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. %load_ext sql to load sql function in notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext sql"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. From sqlalchemy import create_engine for make datasets into available in notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Connect PostGreSQL database with Notebook with formula : %sql dialect+driver://username:password@host:port/database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "%sql postgresql://postgres:Dedebotak2305@localhost/dvdrental"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Connect database with sqlalchemy with engine function. Formula = create_engine('dialect+driver://username:password@host:port/database')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine('postgresql://postgres:Dedebotak2305@localhost/dvdrental')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thanks to Muti Siahaan (https://github.com/moowtea/iykra/blob/master/SQL%20and%20Python%20Exercise.ipynb) and Andrei Teleron (https://medium.com/analytics-vidhya/postgresql-integration-with-jupyter-notebook-deb97579a38d) who helped me to understand about how to import SQL to Jupyter Notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1 : SQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A customer wants to know the films about **\"Astronout\"**. How many recommendations could you give for him?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "1 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>78</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(78,)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select count(*) as Total\n",
    "from film f\n",
    "where f.description @@ to_tsquery('astronaut');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How many film have a rating of **'R'** and a replacement cost between **$5  to  $15**?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "1 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>52</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(52,)]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select count(*) as Total \n",
    "from film\n",
    "where rating = 'R' and replacement_cost between 5 and 15;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How **many payment** did each staff member handle? \n",
    "<br> How **much total amount** processed by each staff member? </br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "2 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "        <th>id</th>\n",
       "        <th>count</th>\n",
       "        <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Jon Stephens</td>\n",
       "        <td>2</td>\n",
       "        <td>7304</td>\n",
       "        <td>31059.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Mike Hillyer</td>\n",
       "        <td>1</td>\n",
       "        <td>7292</td>\n",
       "        <td>30252.12</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Jon Stephens', 2, 7304, Decimal('31059.92')),\n",
       " ('Mike Hillyer', 1, 7292, Decimal('30252.12'))]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select concat(s.first_name,' ',s.last_name) as Name, s.staff_id as id, count(*),sum(p2.amount)\n",
    "from staff s\n",
    "inner join payment p2  \n",
    "on s.staff_id = p2.staff_id\n",
    "group by s.staff_id\n",
    "order by 3 desc;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Final Answer = **Jon Stephens (ID : 2)** should get a bonus."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Average Replacement Cost** By Rating:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "5 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>rating</th>\n",
       "        <th>average</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>G</td>\n",
       "        <td>20.1248314606741573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>PG</td>\n",
       "        <td>18.9590721649484536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>PG-13</td>\n",
       "        <td>20.4025560538116592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>R</td>\n",
       "        <td>20.2310256410256410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>NC-17</td>\n",
       "        <td>20.1376190476190476</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('G', Decimal('20.1248314606741573')),\n",
       " ('PG', Decimal('18.9590721649484536')),\n",
       " ('PG-13', Decimal('20.4025560538116592')),\n",
       " ('R', Decimal('20.2310256410256410')),\n",
       " ('NC-17', Decimal('20.1376190476190476'))]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select rating, avg(replacement_cost) as average from film\n",
    "group by rating\n",
    "order by 1 asc;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 customers who spend **most amount** of money:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "5 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "        <th>email</th>\n",
       "        <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Eleanor Hunt</td>\n",
       "        <td>eleanor.hunt@sakilacustomer.org</td>\n",
       "        <td>211.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Karl Seal</td>\n",
       "        <td>karl.seal@sakilacustomer.org</td>\n",
       "        <td>208.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Marion Snyder</td>\n",
       "        <td>marion.snyder@sakilacustomer.org</td>\n",
       "        <td>194.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Rhonda Kennedy</td>\n",
       "        <td>rhonda.kennedy@sakilacustomer.org</td>\n",
       "        <td>191.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Clara Shaw</td>\n",
       "        <td>clara.shaw@sakilacustomer.org</td>\n",
       "        <td>189.60</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Eleanor Hunt', 'eleanor.hunt@sakilacustomer.org', Decimal('211.55')),\n",
       " ('Karl Seal', 'karl.seal@sakilacustomer.org', Decimal('208.58')),\n",
       " ('Marion Snyder', 'marion.snyder@sakilacustomer.org', Decimal('194.61')),\n",
       " ('Rhonda Kennedy', 'rhonda.kennedy@sakilacustomer.org', Decimal('191.62')),\n",
       " ('Clara Shaw', 'clara.shaw@sakilacustomer.org', Decimal('189.60'))]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select concat(c2.first_name, ' ',c2.last_name) as Name, c2.email, sum(p2.amount) as Total\n",
    "from customer c2 \n",
    "inner join payment p2 \n",
    "on c2.customer_id = p2.customer_id \n",
    "group by 1,2\n",
    "order by 3 desc\n",
    "limit 5;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How **many copies** of each movie in each store do we have?\n",
    "<br> (To see all answers, please erase the **limit**) </br> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "10 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>film_id</th>\n",
       "        <th>title</th>\n",
       "        <th>address</th>\n",
       "        <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "        <td>Academy Dinosaur</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "        <td>Academy Dinosaur</td>\n",
       "        <td>47 MySakila Drive</td>\n",
       "        <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2</td>\n",
       "        <td>Ace Goldfinger</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>3</td>\n",
       "        <td>Adaptation Holes</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>4</td>\n",
       "        <td>Affair Prejudice</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>4</td>\n",
       "        <td>Affair Prejudice</td>\n",
       "        <td>47 MySakila Drive</td>\n",
       "        <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>5</td>\n",
       "        <td>African Egg</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>6</td>\n",
       "        <td>Agent Truman</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>6</td>\n",
       "        <td>Agent Truman</td>\n",
       "        <td>47 MySakila Drive</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>7</td>\n",
       "        <td>Airplane Sierra</td>\n",
       "        <td>28 MySQL Boulevard</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(1, 'Academy Dinosaur', '28 MySQL Boulevard', 4),\n",
       " (1, 'Academy Dinosaur', '47 MySakila Drive', 4),\n",
       " (2, 'Ace Goldfinger', '28 MySQL Boulevard', 3),\n",
       " (3, 'Adaptation Holes', '28 MySQL Boulevard', 4),\n",
       " (4, 'Affair Prejudice', '28 MySQL Boulevard', 3),\n",
       " (4, 'Affair Prejudice', '47 MySakila Drive', 4),\n",
       " (5, 'African Egg', '28 MySQL Boulevard', 3),\n",
       " (6, 'Agent Truman', '28 MySQL Boulevard', 3),\n",
       " (6, 'Agent Truman', '47 MySakila Drive', 3),\n",
       " (7, 'Airplane Sierra', '28 MySQL Boulevard', 3)]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select i.film_id, f.title, a2.address,count(*) as Total\n",
    "from (inventory i \n",
    "inner join film f on i.film_id  = f.film_id)\n",
    "inner join store s2 on i.store_id = s2.store_id\n",
    "inner join address a2 on s2.address_id = a2.address_id \n",
    "group by 1,2,3\n",
    "order by 1,2,3\n",
    "Limit 10;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Customers who eligible for the credit card (**minimum 40 transactions**) :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@localhost/dvdrental\n",
      "3 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>name</th>\n",
       "        <th>email</th>\n",
       "        <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Clara Shaw</td>\n",
       "        <td>clara.shaw@sakilacustomer.org</td>\n",
       "        <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Karl Seal</td>\n",
       "        <td>karl.seal@sakilacustomer.org</td>\n",
       "        <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Eleanor Hunt</td>\n",
       "        <td>eleanor.hunt@sakilacustomer.org</td>\n",
       "        <td>45</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Clara Shaw', 'clara.shaw@sakilacustomer.org', 40),\n",
       " ('Karl Seal', 'karl.seal@sakilacustomer.org', 42),\n",
       " ('Eleanor Hunt', 'eleanor.hunt@sakilacustomer.org', 45)]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "\n",
    "select concat(c2.first_name,' ',c2.last_name) as Name, c2.email, count(*) as Total\n",
    "from customer c2 \n",
    "inner join payment p2 \n",
    "on c2.customer_id = p2.customer_id\n",
    "group by 1,2\n",
    "having count(*) >= 40\n",
    "order by 3;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2 : Phyton"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please make a phyton function that introduces your name, address, DOB, and print them into one sentence!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input Name: Ravelto Wangistu\n",
      "Input Address: Tangerang\n",
      "Input D.O.B: May 23,1998\n",
      "My name is Ravelto Wangistu, I live in Tangerang, I was born on May 23,1998.\n"
     ]
    }
   ],
   "source": [
    "name = input('Input Name: ')\n",
    "address = input('Input Address: ')\n",
    "dob = input('Input D.O.B: ')\n",
    "\n",
    "print('My name is '+ str(name) + ', I live in ' + str(address) + ', I was born on ' + str(dob) +'.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Thank You and Have a nice day! For any suggestion, please chat me through github.**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
